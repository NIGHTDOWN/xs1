def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    // throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

// apply plugin: 'com.android.application'

// apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
//发布正式版  
// flutter run --release
// 创建密钥库
//  生成签名信息
plugins {
  id "com.android.application"
  id "kotlin-android"
  id "dev.flutter.flutter-gradle-plugin"
}
// keytool -genkey -v -keystore d:/key.jks -keyalg RSA -keysize 2048 -validity 10000 -alias key
// keytool -importkeystore -srckeystore d:/key.jks -destkeystore d:/key.jks -deststoretype pkcs12

//签名信息
def keystoreProperties = new Properties()
    def keystorePropertiesFile = rootProject.file('key.properties')
    if (keystorePropertiesFile.exists()) {
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdkVersion 33

    // lintOptions {
    //     disable 'InvalidPackage'
    // }

    
    //正式包开这个才能编译
    lintOptions {
            checkReleaseBuilds false
            abortOnError false
        }



//签名信息
    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            // minifyEnabled true
            // shrinkResources false
            // zipAlignEnabled true
            // signingConfig signingConfigs.release
            // debuggable false
            // jniDebuggable false
            // renderscriptDebuggable false
        }
        }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.ng.story"
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion 33
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
//        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            //signingConfig signingConfigs.debug
            //签名信息
            release {
                signingConfig signingConfigs.release
                minifyEnabled true //混淆
                zipAlignEnabled true   //Zipalign优化
                shrinkResources true //删除无用资源
             
                // 显示Log
                buildConfigField "boolean", "LOG_DEBUG", "false"
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            }

        }
    }
    // //编译x86平台
    // splits {
    //     abi {
    //         enable true
    //         reset()
    //         include 'x86', 'armeabi-v7a', 'x86_64'
    //         universalApk true
    //     }
    // }

}

flutter {
    source '../..'
}

dependencies {
    testImplementation 'junit:junit:4.12'
//    androidTestImplementation 'com.android.support.test:runner:1.0.2'
//    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    androidTestImplementation 'androidx.test.runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
    //解决 Program type already present: android.support.v4.os
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "androidx.multidex:multidex:2.0.0"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.media:media:1.1.0'
    implementation 'androidx.core:core:1.0.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.annotation:annotation:1.0.1'
    implementation 'com.google.android.material:material:1.1.0-alpha02'
    //引入支付 最新3.0.0 库
    implementation 'com.android.billingclient:billing:3.0.2' 
    //引入json
    implementation 'com.alibaba:fastjson:1.1.55.android'
    //谷歌登入
    // implementation 'com.google.firebase:firebase-core:16.8.0'
    
    implementation 'com.google.firebase:firebase-analytics:17.2.2'
    //facebooksdk版本升级
    // implementation 'com.facebook.android:facebook-android-sdk:[5,6)'
    implementation 'com.google.android.play:core:1.8.0'
    //fb广告
    // implementation 'com.facebook.android:audience-network-sdk:5.+'
}

//谷歌登入,下载googlejosn，复制到android/app目录下
apply plugin: 'com.google.gms.google-services'

